//CODE-GEN FILE
//This file is generated from subfolder "meta".
//Changes to this file must be made in the meta project.

#include <QString>
#include <QHash>

enum NodeType {
	ABS,
	ADDITION,
	ARGS,
	BACKSLASH,
	BOOLEANS,
	BRACKET_GROUPING,
	CALL,
	COMPLEX_NUMS,
	CONTINUOUS,
	CROSS,
	DAGGER,
	DECREMENT,
	DEFINE_EQUALS,
	DIVIDE,
	DOT,
	EMPTY_SET,
	EQUAL,
	EXPR_STMT,
	FACTORIAL,
	FORWARDSLASH,
	GREATER,
	GREATER_EQUAL,
	IDENTIFIER,
	IMPLICIT_MULTIPLY,
	IN,
	INCREMENT,
	INFTY,
	INTEGERS,
	INTEGRAL,
	INTERSECTION,
	LESS,
	LESS_EQUAL,
	LOGICAL_AND,
	LOGICAL_NOT,
	LOGICAL_OR,
	MODULUS,
	MULTIFACTORIAL,
	MULTIPLICATION,
	NATURAL_NUMS,
	NEGATIVE_REALS,
	NORM,
	NOT_EQUAL,
	NOT_IN,
	NUMBER,
	PAREN_GROUPING,
	POSITIVE_REALS,
	POWER,
	QUATERNIONS,
	RANGE_CLOSE_CLOSE,
	RANGE_CLOSE_OPEN,
	RANGE_OPEN_CLOSE,
	RANGE_OPEN_OPEN,
	RATIONAL_NUMS,
	REALS,
	SET_LITERAL,
	SUBSCRIPT_ACCESS,
	SUBSCRIPT_PARTIAL,
	SUBTRACTION,
	SUMMATION,
	TICK_DERIVATIVE,
	TRANSPOSE,
	TYPED_BINOMIAL,
	TYPED_CASES,
	TYPED_FRACTION,
	TYPED_MATRIX,
	TYPED_POWER,
	TYPED_ROOT,
	TYPED_SQRT,
	UNARY_MINUS,
	UNION,
	VEE,
	WEDGE,
};

static constexpr int NodeType_Size = 72;

static const QHash<NodeType, QString> labels {
	{ABS, "|‚ãÖ|"},
	{ADDITION, "+"},
	{ARGS, "args"},
	{BACKSLASH, "\\\\"},
	{BOOLEANS, "ùîπ"},
	{BRACKET_GROUPING, "group[]"},
	{CALL, "f()"},
	{COMPLEX_NUMS, "‚ÑÇ "},
	{CONTINUOUS, "‚ÑÇ‚Åø"},
	{CROSS, "√ó"},
	{DAGGER, "‚Ä†"},
	{DECREMENT, "x‚Åª"},
	{DEFINE_EQUALS, "‚âî"},
	{DIVIDE, "√∑"},
	{DOT, "‚ãÖ"},
	{EMPTY_SET, "‚àÖ"},
	{EQUAL, "="},
	{EXPR_STMT, "expr\\nstmt"},
	{FACTORIAL, "!"},
	{FORWARDSLASH, "/"},
	{GREATER, ">"},
	{GREATER_EQUAL, "‚â•"},
	{IDENTIFIER, "id: "},
	{IMPLICIT_MULTIPLY, "*imp"},
	{IN, "‚àà"},
	{INCREMENT, "x‚Å∫"},
	{INFTY, "‚àû"},
	{INTEGERS, "‚Ñ§"},
	{INTEGRAL, "‚à´"},
	{INTERSECTION, "‚à©"},
	{LESS, "<"},
	{LESS_EQUAL, "‚â§"},
	{LOGICAL_AND, "‚àß"},
	{LOGICAL_NOT, "¬¨"},
	{LOGICAL_OR, "‚à®"},
	{MODULUS, "%"},
	{MULTIFACTORIAL, "!"},
	{MULTIPLICATION, "*"},
	{NATURAL_NUMS, "‚Ñï"},
	{NEGATIVE_REALS, "‚Ñù‚Åª"},
	{NORM, "‚Äñ‚ãÖ‚Äñ"},
	{NOT_EQUAL, "‚â†"},
	{NOT_IN, "‚àâ"},
	{NUMBER, ""},
	{PAREN_GROUPING, "group()"},
	{POSITIVE_REALS, "‚Ñù‚Å∫"},
	{POWER, "^"},
	{QUATERNIONS, "‚Ñç"},
	{RANGE_CLOSE_CLOSE, "range[]"},
	{RANGE_CLOSE_OPEN, "range[)"},
	{RANGE_OPEN_CLOSE, "range(]"},
	{RANGE_OPEN_OPEN, "range()"},
	{RATIONAL_NUMS, "‚Ñö"},
	{REALS, "‚Ñù"},
	{SET_LITERAL, "{}"},
	{SUBSCRIPT_ACCESS, "x·µ¢"},
	{SUBSCRIPT_PARTIAL, "‚àÇ"},
	{SUBTRACTION, "-"},
	{SUMMATION, "Œ£"},
	{TICK_DERIVATIVE, "'"},
	{TRANSPOSE, "‚ä§"},
	{TYPED_BINOMIAL, "‚Åúb"},
	{TYPED_CASES, "‚Åúc"},
	{TYPED_FRACTION, "‚Åúf"},
	{TYPED_MATRIX, "‚Åú‚äû"},
	{TYPED_POWER, "‚Åú^"},
	{TYPED_ROOT, "‚Åú‚àö"},
	{TYPED_SQRT, "‚Åú‚àö"},
	{UNARY_MINUS, "-"},
	{UNION, "‚à™"},
	{VEE, "‚à®"},
	{WEDGE, "‚àß"},
};

static const QHash<NodeType, QString> node_color {
	{BOOLEANS, "orange"},
	{COMPLEX_NUMS, "orange"},
	{EMPTY_SET, "orange"},
	{IDENTIFIER, "lightblue"},
	{INFTY, "orange"},
	{INTEGERS, "orange"},
	{NATURAL_NUMS, "orange"},
	{NEGATIVE_REALS, "orange"},
	{NUMBER, "orange"},
	{POSITIVE_REALS, "orange"},
	{QUATERNIONS, "orange"},
	{RATIONAL_NUMS, "orange"},
	{REALS, "orange"},
};

