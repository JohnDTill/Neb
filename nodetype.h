#include <QString>
#include <QHash>

enum NodeType {
	REALS,
	POSITIVE_REALS,
	NEGATIVE_REALS,
	INTEGERS,
	NATURAL_NUMS,
	RATIONAL_NUMS,
	QUATERNIONS,
	IDENTIFIER,
	NUMBER,
	ADDITION,
	SUBTRACTION,
	UNARY_MINUS,
	MULTIPLICATION,
	IMPLICIT_MULTIPLY,
	CROSS,
	DOT,
	POWER,
	TYPED_POWER,
	TYPED_FRACTION,
	IN,
	NOT_IN,
	EQUAL,
	NOT_EQUAL,
	SUMMATION,
	LOGICAL_NOT,
	LOGICAL_AND,
	LOGICAL_OR,
	INTEGRAL,
	FACTORIAL,
	MULTIFACTORIAL,
	GREATER,
	LESS,
	GREATER_EQUAL,
	LESS_EQUAL,
	EXPR_STMT,
	PAREN_GROUPING,
	RANGE,
	BRACKET_GROUPING,
	SET_LITERAL,
	ABS,
	NORM,
	ARGS,
	TYPED_CASES,
	TYPED_MATRIX,
	TRANSPOSE,
	DAGGER,
	TYPED_SQRT,
	TYPED_ROOT,
	CALL,
	INCREMENT,
	DECREMENT,
	TYPED_BINOMIAL,
	SUBSCRIPT_ACCESS,
	SUBSCRIPT_PARTIAL,
	TICK_DERIVATIVE,
	DEFINE_EQUALS,
	UNION,
	INTERSECTION,
	BACKSLASH,
	DIVIDE,
	FORWARDSLASH,
	MODULUS,
};

static const QHash<NodeType, QString> labels {
	{REALS, "ℝ"},
	{POSITIVE_REALS, "ℝ⁺"},
	{NEGATIVE_REALS, "ℝ⁻"},
	{INTEGERS, "ℤ"},
	{NATURAL_NUMS, "ℕ"},
	{RATIONAL_NUMS, "ℚ"},
	{QUATERNIONS, "ℍ"},
	{IDENTIFIER, "id"},
	{NUMBER, "num"},
	{ADDITION, "+"},
	{SUBTRACTION, "-"},
	{UNARY_MINUS, "-"},
	{MULTIPLICATION, "*"},
	{IMPLICIT_MULTIPLY, "*"},
	{CROSS, "×"},
	{DOT, "⋅"},
	{POWER, "^"},
	{TYPED_POWER, "⁜^"},
	{TYPED_FRACTION, "⁜f"},
	{IN, "∈"},
	{NOT_IN, "∉"},
	{EQUAL, "="},
	{NOT_EQUAL, "≠"},
	{SUMMATION, "Σ"},
	{LOGICAL_NOT, "¬"},
	{LOGICAL_AND, "∧"},
	{LOGICAL_OR, "∨"},
	{INTEGRAL, "∫"},
	{FACTORIAL, "!"},
	{MULTIFACTORIAL, "!"},
	{GREATER, ">"},
	{LESS, "<"},
	{GREATER_EQUAL, "≥"},
	{LESS_EQUAL, "≤"},
	{EXPR_STMT, "expr\\nstmt"},
	{PAREN_GROUPING, "()"},
	{RANGE, "R"},
	{BRACKET_GROUPING, "[]"},
	{SET_LITERAL, "{}"},
	{ABS, "|⋅|"},
	{NORM, "‖⋅‖"},
	{ARGS, "args"},
	{TYPED_CASES, "⁜c"},
	{TYPED_MATRIX, "⁜⊞"},
	{TRANSPOSE, "⊤"},
	{DAGGER, "†"},
	{TYPED_SQRT, "⁜√"},
	{TYPED_ROOT, "⁜√"},
	{CALL, "f()"},
	{INCREMENT, "x⁺"},
	{DECREMENT, "x⁻"},
	{TYPED_BINOMIAL, "(:)"},
	{SUBSCRIPT_ACCESS, "xᵢ"},
	{SUBSCRIPT_PARTIAL, "∂"},
	{TICK_DERIVATIVE, "'"},
	{DEFINE_EQUALS, "≔"},
	{UNION, "∪"},
	{INTERSECTION, "∩"},
	{BACKSLASH, "\\"},
	{DIVIDE, "÷"},
	{FORWARDSLASH, "/"},
	{MODULUS, "%"},
};
